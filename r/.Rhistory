url_03_train <- 'https://raw.githubusercontent.com/jyurko/CS_1675_Spring_2022/main/HW/10/hw_10_prob_03_train.csv'
prob_03_df <- readr::read_csv( url_03_train, col_names = TRUE)
prob_03_df %>% glimpse()
prob_03_lf <- prob_03_df %>%
tibble::rowid_to_column("obs_id") %>%
pivot_longer(!c("obs_id", "y"))
prob_03_lf %>% glimpse()
prob_03_lf %>%
ggplot(mapping = aes(x = value, y = y)) +
geom_point() +
facet_wrap(~ name)
tibble::tibble(
x = seq(from = -5.5, to = 5.5, length.out = 101)
) %>%
mutate(logistic_result = boot::inv.logit(x),
tanh_result = tanh(x)) %>%
# rest of the code here is completed for you
pivot_longer(!c("x")) %>%
ggplot(mapping = aes(x = x, y = value)) +
geom_hline(yintercept = c(-1, 0, 1),
color = 'grey50', linetype = 'dashed') +
geom_line(mapping = aes(y = value,
color = name,
linetype = name),
size = 1.15) +
ggthemes::scale_color_calc("") +
scale_linetype_discrete("") +
theme_bw() +
theme(legend.position = "top")
### design matrix
Xmat_03 <- model.matrix(y ~ ., data = prob_03_df)
info_three_units <- list(
yobs = prob_03_df$y,
design_matrix = Xmat_03,
num_hidden = 3,
transform_hidden = tanh
)
info_three_units$num_params <- info_three_units$num_hidden * ncol(info_three_units$design_matrix) + info_three_units$num_hidden + 1
info_three_units$num_params
my_neuralnet_sse <- function(theta, my_info)
{
# extract the hidden unit parameters
X <- my_info$design_matrix
length_beta_per_unit <- ncol(my_info$design_matrix) # how many betas are there?
total_num_betas <- my_info$num_hidden * length_beta_per_unit # how many total betas are there?
beta_vec <- theta[1:total_num_betas]
# reorganize the beta parameters into a matrix
Bmat <- matrix(beta_vec, nrow = length_beta_per_unit, byrow = FALSE)
# extract the output layer parameters
a_all <- theta[(total_num_betas + 1):length(theta)]
# reorganize the output layer parameters by extracting
# the output layer intercept (the bias)
a0 <- a_all[1] # output layer bias?
aw <- a_all[-1] # output layer weights?
# calculate the linear predictors associated with
# each hidden unit
A <- X %*% Bmat
# pass through the non-linear transformation function
H <- my_info$transform_hidden(A)
# calculate the response (the output layer)
f <- as.vector(a0 + H %*% matrix(aw))
# calculate the SSE
sum((my_info$yobs - f)^2)
}
my_neuralnet_sse(rep(0, info_three_units$num_params), info_three_units)
my_neuralnet_sse(rep(-1.25, info_three_units$num_params), info_three_units)
optim_fit_3_a <- optim(rep(0, info_three_units$num_params),
my_neuralnet_sse,
gr = NULL,
info_three_units,
method = "BFGS",
hessian = FALSE,
control = list(maxit = 5001))
optim_fit_3_b <- optim(rep(-1.25, info_three_units$num_params),
my_neuralnet_sse,
gr = NULL,
info_three_units,
method = "BFGS",
hessian = FALSE,
control = list(maxit = 5001))
optim_fit_3_a$par
optim_fit_3_b$par
set.seed(412412)
init_guess_03_c <- rnorm(n = info_three_units$num_params)
set.seed(214214)
init_guess_03_d <- rnorm(n = info_three_units$num_params)
optim_fit_3_c <- optim(init_guess_03_c,
my_neuralnet_sse,
gr = NULL,
info_three_units,
method = "BFGS",
hessian = FALSE,
control = list(maxit = 5001))
optim_fit_3_d <- optim(init_guess_03_d,
my_neuralnet_sse,
gr = NULL,
info_three_units,
method = "BFGS",
hessian = FALSE,
control = list(maxit = 5001))
optim_fit_3_c$par
optim_fit_3_d$par
optim_fit_3_a$value
optim_fit_3_b$value
optim_fit_3_c$value
optim_fit_3_d$value
train_1layer_nnet_sse <- function(num_hidden, transform_func, X, y)
{
my_info_list <- list(
yobs = y,
design_matrix = X,
num_hidden = num_hidden,
transform_hidden = transform_func
)
my_info_list$num_params <- my_info_list$num_hidden * ncol(my_info_list$design_matrix) + my_info_list$num_hidden + 1 # total number of hidden and output layer parameters
# generate random initial guess
init_guess <- rnorm(n = my_info_list$num_params)
# call optim to fit the neural network
optim(init_guess,
my_neuralnet_sse,
gr = NULL,
my_info_list,
method = "BFGS",
hessian = FALSE,
control = list(maxit = 10001))
}
set.seed(412412)
check_optim_fit_3_c <- train_1layer_nnet_sse(info_three_units$num_hidden,
info_three_units$transform_hidden,
info_three_units$design_matrix,
info_three_units$yobs)
check_optim_fit_3_c$par
optim_fit_3_c$par
set.seed(412412)
optim_fit_6_a <- train_1layer_nnet_sse(num_hidden = 6,
transform_func = tanh,
X = Xmat_03,
y = prob_03_df)
set.seed(214214)
optim_fit_6_b <- train_1layer_nnet_sse(num_hidden = 6,
transform_func = tanh,
X = Xmat_03,
y = prob_03_df)
set.seed(412412)
optim_fit_12_a <- train_1layer_nnet_sse(num_hidden = 12,
transform_func = tanh,
X = Xmat_03,
y = prob_03_df)
set.seed(214214)
optim_fit_12_b <- train_1layer_nnet_sse(num_hidden = 12,
transform_func = tanh,
X = Xmat_03,
y = prob_03_df)
set.seed(412412)
optim_fit_24_a <- train_1layer_nnet_sse(num_hidden = 24,
transform_func = tanh,
X = Xmat_03,
y = prob_03_df)
set.seed(214214)
optim_fit_24_b <- train_1layer_nnet_sse(num_hidden = 24,
transform_func = tanh,
X = Xmat_03,
y = prob_03_df)
optim_fit_3_a$value
optim_fit_3_b$value
optim_fit_3_c$value
optim_fit_3_d$value
optim_fit_6_a$value
optim_fit_6_b$value
optim_fit_12_a$value
optim_fit_12_b$value
optim_fit_24_a$value
optim_fit_24_b$value
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(visdat)
library(corrplot)
df_all <- readr::read_csv("final_project_train.csv", col_names = TRUE)
df_all %>% glimpse()
visdat::vis_miss(df_all)
df_all %>% purrr::map_dbl(n_distinct)
df_all %>% count(region)
df_all %>% ggplot(mapping = aes(x = region)) + geom_bar()
df_all %>% count(customer)
df_all %>% ggplot(mapping = aes(x = customer)) + geom_bar()
df_all %>% count(outcome)
df_all %>% ggplot(mapping = aes(x = outcome)) + geom_bar()
mean(df_all$outcome == "event")
df_all %>%
select(all_of(starts_with("xb_"))) %>%
summary()
df_all %>%
select(all_of(starts_with("xb_"))) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid")) %>%
ggplot(mapping = aes(x = value)) +
geom_histogram(bins = 35) +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(all_of(starts_with("xn_"))) %>%
summary()
df_all %>%
select(all_of(starts_with("xn_"))) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid")) %>%
ggplot(mapping = aes(x = value)) +
geom_histogram(bins = 35) +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(all_of(starts_with("xa_"))) %>%
summary()
df_all %>%
select(all_of(starts_with("xa_"))) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid")) %>%
ggplot(mapping = aes(x = value)) +
geom_histogram(bins = 35) +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(all_of(starts_with("xs_"))) %>%
summary()
df_all %>%
select(all_of(starts_with("xs_"))) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid")) %>%
ggplot(mapping = aes(x = value)) +
geom_histogram(bins = 35) +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(all_of(starts_with("xw_"))) %>%
summary()
df_all %>%
select(all_of(starts_with("xw_"))) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid")) %>%
ggplot(mapping = aes(x = value)) +
geom_histogram(bins = 35) +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(response) %>%
summary()
df_all %>%
select(response) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid")) %>%
ggplot(mapping = aes(x = value)) +
geom_histogram(bins = 35) +
geom_vline(xintercept = quantile(df_all$response),
color = 'red', size = 1, linetype = 'dashed') +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(-rowid, -customer, -outcome) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid", "region")) %>%
mutate(input_id = as.integer( stringr::str_extract(name, "\\d+") )) %>%
ggplot(mapping = aes(x = input_id, y = value)) +
geom_boxplot(mapping = aes(group = interaction(input_id, region),
fill = region,
color = region),
alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme(legend.position = "top")
df_all %>%
select(-rowid, -region, -outcome) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid", "customer")) %>%
mutate(input_id = as.integer( stringr::str_extract(name, "\\d+") )) %>%
ggplot(mapping = aes(x = input_id, y = value)) +
geom_boxplot(mapping = aes(group = interaction(input_id, customer),
fill = customer,
color = customer),
alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme(legend.position = "top")
df_all %>%
select(-rowid, -region, -customer) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid", "outcome")) %>%
mutate(input_id = as.integer( stringr::str_extract(name, "\\d+") )) %>%
ggplot(mapping = aes(x = input_id, y = value)) +
geom_boxplot(mapping = aes(group = interaction(input_id, outcome),
fill = outcome,
color = outcome),
alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme(legend.position = "top")
df_all %>%
select(all_of(starts_with("x"))) %>%
cor() %>%
corrplot::corrplot(method = 'square', type = 'upper')
df_all %>%
select(all_of(starts_with("x"))) %>%
cor() %>%
corrplot::corrplot(method = 'square', type = 'upper',
order = 'hclust', hclust.method = 'ward.D2')
df_all %>%
ggplot(mapping = aes(x = xb_01, y = response)) +
geom_point()
df_all %>%
select(-rowid, -customer, -outcome, -response) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid", "region")) %>%
mutate(input_id = as.integer( stringr::str_extract(name, "\\d+") )) %>%
ggplot(mapping = aes(x = input_id, y = value)) +
geom_boxplot(mapping = aes(group = interaction(input_id, region),
fill = region,
color = region),
alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme(legend.position = "top")
df_all %>%
select(-rowid, -region, -outcome, -response) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid", "customer")) %>%
mutate(input_id = as.integer( stringr::str_extract(name, "\\d+") )) %>%
ggplot(mapping = aes(x = input_id, y = value)) +
geom_boxplot(mapping = aes(group = interaction(input_id, customer),
fill = customer,
color = customer),
alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme(legend.position = "top")
df_all %>%
select(-rowid, -region, -customer, -response) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid", "outcome")) %>%
mutate(input_id = as.integer( stringr::str_extract(name, "\\d+") )) %>%
ggplot(mapping = aes(x = input_id, y = value)) +
geom_boxplot(mapping = aes(group = interaction(input_id, outcome),
fill = outcome,
color = outcome),
alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme(legend.position = "top")
df_all %>%
ggplot(mapping = aes(x = xb_01, y = response)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
df_all %>%
ggplot(mapping = aes(x = xb_01, y = response)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(visdat)
library(corrplot)
df_all <- readr::read_csv("final_project_train.csv", col_names = TRUE)
df_all %>% glimpse()
visdat::vis_miss(df_all)
df_all %>% purrr::map_dbl(n_distinct)
df_all %>% count(region)
df_all %>% ggplot(mapping = aes(x = region)) + geom_bar()
df_all %>% count(customer)
df_all %>% ggplot(mapping = aes(x = customer)) + geom_bar()
df_all %>% count(outcome)
df_all %>% ggplot(mapping = aes(x = outcome)) + geom_bar()
mean(df_all$outcome == "event")
df_all %>%
select(all_of(starts_with("xb_"))) %>%
summary()
df_all %>%
select(all_of(starts_with("xb_"))) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid")) %>%
ggplot(mapping = aes(x = value)) +
geom_histogram(bins = 35) +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(all_of(starts_with("xn_"))) %>%
summary()
df_all %>%
select(all_of(starts_with("xn_"))) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid")) %>%
ggplot(mapping = aes(x = value)) +
geom_histogram(bins = 35) +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(all_of(starts_with("xa_"))) %>%
summary()
df_all %>%
select(all_of(starts_with("xa_"))) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid")) %>%
ggplot(mapping = aes(x = value)) +
geom_histogram(bins = 35) +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(all_of(starts_with("xs_"))) %>%
summary()
df_all %>%
select(all_of(starts_with("xs_"))) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid")) %>%
ggplot(mapping = aes(x = value)) +
geom_histogram(bins = 35) +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(all_of(starts_with("xw_"))) %>%
summary()
df_all %>%
select(all_of(starts_with("xw_"))) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid")) %>%
ggplot(mapping = aes(x = value)) +
geom_histogram(bins = 35) +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(response) %>%
summary()
df_all %>%
select(response) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid")) %>%
ggplot(mapping = aes(x = value)) +
geom_histogram(bins = 35) +
geom_vline(xintercept = quantile(df_all$response),
color = 'red', size = 1, linetype = 'dashed') +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(-rowid, -customer, -outcome, -response) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid", "region")) %>%
mutate(input_id = as.integer( stringr::str_extract(name, "\\d+") )) %>%
ggplot(mapping = aes(x = input_id, y = value)) +
geom_boxplot(mapping = aes(group = interaction(input_id, region),
fill = region,
color = region),
alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme(legend.position = "top")
df_all %>%
select(-rowid, -region, -outcome, -response) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid", "customer")) %>%
mutate(input_id = as.integer( stringr::str_extract(name, "\\d+") )) %>%
ggplot(mapping = aes(x = input_id, y = value)) +
geom_boxplot(mapping = aes(group = interaction(input_id, customer),
fill = customer,
color = customer),
alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme(legend.position = "top")
df_all %>%
select(-rowid, -region, -customer, -response) %>%
tibble::rowid_to_column() %>%
pivot_longer(!c("rowid", "outcome")) %>%
mutate(input_id = as.integer( stringr::str_extract(name, "\\d+") )) %>%
ggplot(mapping = aes(x = input_id, y = value)) +
geom_boxplot(mapping = aes(group = interaction(input_id, outcome),
fill = outcome,
color = outcome),
alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme(legend.position = "top")
df_all %>%
select(all_of(starts_with("x"))) %>%
cor() %>%
corrplot::corrplot(method = 'square', type = 'upper')
df_all %>%
select(all_of(starts_with("x"))) %>%
cor() %>%
corrplot::corrplot(method = 'square', type = 'upper',
order = 'hclust', hclust.method = 'ward.D2')
df_all %>%
ggplot(mapping = aes(x = xb_01, y = response)) +
geom_point()
# a figure like this but for each xb_ feature
df_all %>%
ggplot(mapping = aes(x = xb_01, y = log(response))) +
geom_point()
df_all %>%
select(starts_with("xb_"), response) %>%
tibble::rowid_to_column() %>%
pivot_longer(starts_with("xb_"))
df_all %>%
select(starts_with("xb_"), response) %>%
tibble::rowid_to_column() %>%
pivot_longer(starts_with("xb_")) %>%
ggplot(mapping = aes(x = value, y = log(response))) +
geom_point() +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
df_all %>%
select(starts_with("xb_"), response) %>%
tibble::rowid_to_column() %>%
pivot_longer(starts_with("xb_")) %>%
ggplot(mapping = aes(x = value, y = log(response))) +
geom_point() +
geom_smooth(formula = y ~ x, method = "lm") +
facet_wrap(~ name, scales = "free") +
theme(axis.text.y = element_blank())
